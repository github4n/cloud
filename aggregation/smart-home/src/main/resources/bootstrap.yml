##编码问题 读取配置文件编码问题
banner:
 charset: UTF-8

server:
  port: 18080
  tomcat:
    max-threads: 500
    max-connections: 1000
    uri-encoding: UTF-8
    accesslog:
      buffered: true # Buffer output such that it is only flushed periodically.
      directory: /data/tomcatlogs/logs #
      enabled: true #enable access log
      file-date-format: .yyyy-MM-dd # Date format to place in log file name.
      pattern: '%h %l %u %t "%r" %s %b %D' # Format pattern for access logs.
      prefix: ${spring.application.name}_access_log # Log file name prefix.
      rename-on-rotate: false # Defer inclusion of the date stamp in the file name until rotate time.
      request-attributes-enabled: false # Set request attributes for IP address, Hostname, protocol and port used for the request.
      rotate: true # Enable access log rotation.
      suffix: .log # Log file name suffix.
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  messages:
    encoding: UTF-8

spring:
  #国际化资源位置
  messages:
    basename: i18n/messages,i18n/ValidationMessages
    cache-seconds: 3600
    encoding: UTF-8
  profiles:
    active: dev  #目前处于什么开发环境
  #service name
  application:
    name: smart-home
  cloud:
    config:
      uri: http://192.168.5.20:${config.port:8888}
      #      uri: http://127.0.0.1:8888
      discovery:
        enabled: true                  #是否通过eureka发现config-service
        service-id: config-service     #config-service在eureka中的名称
      name: ${spring.application.name}
#      name: smart-home-qizy
      profile: ${spring.profiles.active}


  #thymelea模板配置
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    content-type: text/html
    cache: false
  resources:
    chain:
      strategy:
        content:
          enabled: true
          paths: /**
eureka:
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://admin:a!23456@192.168.5.20:8761/eureka/
  #      defaultZone: http://admin:a!23456@127.0.0.1:8761/eureka/
  instance:
    instanceId: ${spring.cloud.client.ipAddress}:${server.port}:${spring.application.name}:${spring.application.instance_id:${random.value}}
    prefer-ip-address: true
    metadata-map:
      cluster: MAIN
      user:
        name: admin
        password: a!23456
# Enable redis health check.
management:
  health:
    redis:
      enabled: false

upload:
  img:
    str: jpg,png,gif,svg,psd,jpeg,tiff,tga,eps
  video:
    str: mpg,mpeg,dat,mp4,3gp,mov,rm,ram,rmvb,wmv,asf,avi,asx